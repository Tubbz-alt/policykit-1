From: jouyouyun <jouyouwen717@gmail.com>
Date: Thue, 31 Oct 2019 14:04:32 +0800
Subject: add deepin elf verify checker
---
 src/programs/pkexec.c | 94 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 92 insertions(+), 2 deletions(-)

diff --git a/src/programs/pkexec.c b/src/programs/pkexec.c
index abc660d..7bd8e92 100644
--- a/src/programs/pkexec.c
+++ b/src/programs/pkexec.c
@@ -25,6 +25,7 @@
 
 #define _GNU_SOURCE
 
+#include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
 #include <sys/types.h>
@@ -57,6 +58,16 @@ static gchar *original_cwd;
 static gchar *command_line = NULL;
 static struct passwd *pw;
 
+#define MAX_BUF_SIZE 1024
+// developer mode file, format: '{"enabled": true}'
+#define DEVELOPER_MODE_FILE "/var/lib/deepin/developer_mode.json"
+#define DEVELOPER_MODE_ENABLE_STR "\"enabled\":true"
+#define SECURITY_WHILTELIST_FILE "/var/lib/deepin/deepin_security_verify.whitelist"
+
+static int has_in_developer_mode();
+static int has_in_whitelist(const char *path);
+static int security_verify_check(const char *path);
+
 #ifndef HAVE_CLEARENV
 extern char **environ;
 
@@ -198,7 +209,7 @@ open_session (const gchar *user_to_auth,
       for (n = 0; envlist[n]; n++)
 	{
 	  const char *envitem = envlist[n];
-	  
+
 	  if (g_str_has_prefix (envitem, "XDG_RUNTIME_DIR="))
 	    {
 	      const char *eq = strchr (envitem, '=');
@@ -418,6 +429,79 @@ validate_environment_variable (const gchar *key,
 
 /* ---------------------------------------------------------------------------------------------------- */
 
+static int
+security_verify_check(const char *path)
+{
+    if (has_in_developer_mode()) {
+        return 1;
+    }
+
+    return has_in_whitelist(path);
+}
+
+// TODO(jouyouyun): parse json file
+static int
+has_in_developer_mode()
+{
+    int ret = 0;
+    char buf[MAX_BUF_SIZE] = {0};
+
+    FILE *fr = fopen(DEVELOPER_MODE_FILE, "r");
+    if (!fr) {
+        return ret;
+    }
+
+    while (!feof(fr)) {
+        memset(buf, 0, MAX_BUF_SIZE);
+        size_t n = fgets(buf, MAX_BUF_SIZE, fr);
+        if (n == 0) {
+            break;
+        }
+
+        char *found = strstr(buf, DEVELOPER_MODE_ENABLE_STR);
+        if (found) {
+            ret = 1;
+            break;
+        }
+    }
+
+    fclose(fr);
+    return ret;
+}
+
+static int
+has_in_whitelist(const char *path)
+{
+    int ret = 0;
+    char buf[MAX_BUF_SIZE] = {0};
+
+    FILE *fr = fopen(SECURITY_WHILTELIST_FILE, "r");
+    if (!fr) {
+        return ret;
+    }
+
+    while (!feof(fr)) {
+        memset(buf, 0, MAX_BUF_SIZE);
+        size_t n = fgets(buf, MAX_BUF_SIZE, fr);
+        if (n == 0) {
+            break;
+        }
+
+        // trim '\n'
+        size_t len = strlen(buf);
+        if (buf[len-1] == '\n') {
+            buf[len-1] = '\0';
+        }
+        if (strcmp(buf, path) == 0) {
+            ret = 1;
+            break;
+        }
+    }
+
+    fclose(fr);
+    return ret;
+}
+
 int
 main (int argc, char *argv[])
 {
@@ -601,6 +685,11 @@ main (int argc, char *argv[])
   command_line = g_strjoinv (" ", argv + n);
   exec_argv = argv + n;
 
+  if (!security_verify_check(path)) {
+      g_printerr("%s\n", N_("No root privileges. Please request root access in developer mode in Control Center."));
+      goto out;
+  }
+
   /* Look up information about the user we care about - yes, the return
    * value of this function is a bit funky
    */
@@ -978,7 +1067,8 @@ main (int argc, char *argv[])
   if (result != NULL)
     g_object_unref (result);
 
-  g_free (action_id);
+  if (action_id != NULL)
+      g_free (action_id);
 
   if (details != NULL)
     g_object_unref (details);
@@ -1003,4 +1093,3 @@ main (int argc, char *argv[])
 
   return ret;
 }
-
